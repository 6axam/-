import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, BotCommandScopeChat, BotCommandScopeDefault
from telebot.types import InputMediaPhoto, InputMediaVideo
import time
import requests
from datetime import datetime, timedelta, date
import hashlib
from typing import Union, Optional, Callable, Dict, List, Tuple
from functools import wraps
import logging
from logging.handlers import RotatingFileHandler
import threading
import json
import os
import sys
import subprocess
from collections import defaultdict
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
# –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª –∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
if not logger.handlers:
    file_handler = RotatingFileHandler(
        filename='bot_log.log', maxBytes=2 * 1024 * 1024, backupCount=3, encoding='utf-8'
    )
    file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
    stream_handler = logging.StreamHandler()
    stream_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
    logger.addHandler(file_handler)
    logger.addHandler(stream_handler)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = " "
ADMIN_IDS = [ ]
CHANNEL_ID = 
CHAT_ID = 
SPAM_TIMEOUT = timedelta(hours=1)
MAX_RETRIES = 100000
RETRY_DELAY = 5
STATS_FILE = "stats.json"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
CONTENT_TYPES = ['photo', 'video', 'voice', 'sticker', 'animation', 'videonote']
STATS_PERIODS = {
    'today': (1, "–∑–∞ —Å–µ–≥–æ–¥–Ω—è"),
    'week': (7, "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"),
    'month': (30, "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"),
    'all': (None, "–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è")
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
START_TIME = datetime.now()

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å defaultdict)
stores = {
    'spam': {},
    'admin': {},
    'sent': {},
    'sent_albums': {},  # {media_group_id: [(admin_id, [message_ids]), control_message_id]}
    'albums_buffer': {},  # {media_group_id: {'items': [...], 'caption': str, 'user_id': int, 'timer': threading.Timer}}
    'albums_data': {},  # {media_group_id: {'photos': [file_id,...], 'videos': [file_id,...], 'caption': str}}
    'stats': {
        'approved': defaultdict(int),  # {date: count}
        'rejected': defaultdict(int),  # {date: count}
        'deleted': defaultdict(int)    # {date: count}
    },
    'delete_requests': {},  # {user_id: {'link': str, 'description': str, 'message_id': int}}
    'admin_delete_messages': {}  # {request_id: [(admin_id, message_id), ...]}
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
class DeleteStates:
    WAITING_LINK = "waiting_link"
    WAITING_DESCRIPTION = "waiting_description"

class LinkValidator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    @staticmethod
    def is_valid_telegram_link(link: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram"""
        pattern = r'^https://t\.me/[a-zA-Z0-9_]+/\d+$'
        return bool(re.match(pattern, link.strip()))
    
    @staticmethod
    def extract_channel_and_message_id(link: str) -> tuple:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –∫–∞–Ω–∞–ª–∞ –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å—Å—ã–ª–∫–∏"""
        pattern = r'https://t\.me/([a-zA-Z0-9_]+)/(\d+)'
        match = re.match(pattern, link.strip())
        if match:
            channel_username = match.group(1)
            message_id = int(match.group(2))
            return channel_username, message_id
        return None, None

class MessageHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏—Ö —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    @staticmethod
    def get_content_hash(content: Union[str, telebot.types.Message], content_type: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö–µ—à –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ä–∞–∑–ª–∏—á–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        if not content:
            return ''
        if content_type == 'text':
            return hashlib.md5(content.encode()).hexdigest()
        elif content_type == 'photo':
            return content[-1].file_id
        elif content_type in ['animation', 'sticker', 'voice', 'video', 'videonote']:
            return content.file_id
        return ''

    @staticmethod
    def check_spam(content: Union[str, telebot.types.Message], content_type: str, 
                  store: dict, key_prefix: str = '') -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º —Å TTL-–º–µ—Ç–∫–∞–º–∏ –±–µ–∑ –ø–æ–ª–Ω–æ–π —á–∏—Å—Ç–∫–∏"""
        try:
            content_hash = MessageHandler.get_content_hash(content, content_type)
            if not content_hash:
                return True

            now = datetime.now()
            key = f"{key_prefix}:{content_type}:{content_hash}" if key_prefix else f"{content_type}:{content_hash}"

            last_seen = store.get(key)
            if isinstance(last_seen, datetime) and (now - last_seen) < SPAM_TIMEOUT:
                return True

            store[key] = now

            # –õ–µ–Ω–∏–≤–∞—è –æ—á–∏—Å—Ç–∫–∞: –∏–Ω–æ–≥–¥–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏, –Ω–µ –∫–∞–∂–¥—ã–π —Ä–∞–∑
            if len(store) > 5000:
                cutoff = now - SPAM_TIMEOUT
                stale_keys = [k for k, v in store.items() if isinstance(v, datetime) and v < cutoff]
                for k in stale_keys:
                    store.pop(k, None)

            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_spam: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º —Å–ø–∞–º–æ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

def _finalize_album_and_send(media_group_id: str) -> None:
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä –∞–ª—å–±–æ–º–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    try:
        album_entry = stores['albums_buffer'].get(media_group_id)
        if not album_entry:
            return
        items = album_entry.get('items', [])
        caption = album_entry.get('caption') or ""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        photos: List[str] = []
        videos: List[str] = []
        media_group: List[Union[InputMediaPhoto, InputMediaVideo]] = []
        for idx, part in enumerate(items):
            if part['type'] == 'photo':
                file_id = part['file_id']
                photos.append(file_id)
                if idx == 0:
                    media_group.append(InputMediaPhoto(media=file_id, caption=caption, parse_mode="HTML"))
                else:
                    media_group.append(InputMediaPhoto(media=file_id))
            elif part['type'] == 'video':
                file_id = part['file_id']
                videos.append(file_id)
                if idx == 0:
                    media_group.append(InputMediaVideo(media=file_id, caption=caption, parse_mode="HTML"))
                else:
                    media_group.append(InputMediaVideo(media=file_id))

        # –ù–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
        if not media_group:
            del stores['albums_buffer'][media_group_id]
            return

        # –°–æ—Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –∞–ª—å–±–æ–º–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        stores['albums_data'][media_group_id] = {
            'photos': photos,
            'videos': videos,
            'caption': caption
        }

        # –û—Ç–ø—Ä–∞–≤–∏–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        sent_map: List[Tuple[int, List[int]]] = []
        control_messages: List[Tuple[int, int]] = []
        for admin_id in ADMIN_IDS:
            try:
                sent_msgs = bot.send_media_group(admin_id, media=media_group)
                msg_ids = [m.message_id for m in sent_msgs]
                sent_map.append((admin_id, msg_ids))
                # –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                markup = InlineKeyboardMarkup()
                markup.add(
                    InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_album:{media_group_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_album:{media_group_id}")
                )
                markup.add(
                    InlineKeyboardButton("üì© –í —á–∞—Ç—ã", callback_data=f"sendtochat_album:{media_group_id}")
                )
                ctrl = bot.send_message(admin_id, "–∞–Ω–æ–Ω–∏–º–Ω—ã–π —Ñ–æ—Ç–∫–∏", reply_markup=markup)
                control_messages.append((admin_id, ctrl.message_id))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª—å–±–æ–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

        stores['sent_albums'][media_group_id] = {
            'media_messages': sent_map,
            'control_messages': control_messages
        }

    finally:
        # –û—á–∏—Å—Ç–∏–º –±—É—Ñ–µ—Ä
        if media_group_id in stores['albums_buffer']:
            try:
                timer = stores['albums_buffer'][media_group_id].get('timer')
                if timer:
                    timer.cancel()
            except Exception:
                pass
            del stores['albums_buffer'][media_group_id]

def collect_album_part(message: telebot.types.Message) -> None:
    """–°–æ–±—Ä–∞—Ç—å —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞ –≤ –±—É—Ñ–µ—Ä –ø–æ media_group_id –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É"""
    mgid = str(getattr(message, 'media_group_id', ''))
    if not mgid:
        return
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏
    if mgid not in stores['albums_buffer']:
        stores['albums_buffer'][mgid] = {
            'items': [],
            'caption': getattr(message, 'caption', None),
            'user_id': message.from_user.id,
            'timer': None
        }
    entry = stores['albums_buffer'][mgid]
    # –û–±–Ω–æ–≤–∏–º –ø–æ–¥–ø–∏—Å—å, –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–∞—Å—å
    if not entry.get('caption') and getattr(message, 'caption', None):
        entry['caption'] = message.caption
    # –î–æ–±–∞–≤–∏–º —ç–ª–µ–º–µ–Ω—Ç
    if getattr(message, 'photo', None):
        entry['items'].append({'type': 'photo', 'file_id': message.photo[-1].file_id})
    elif getattr(message, 'video', None):
        entry['items'].append({'type': 'video', 'file_id': message.video.file_id})
    else:
        return
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–µ—Ä —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ (–¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π)
    if entry.get('timer'):
        try:
            entry['timer'].cancel()
        except Exception:
            pass
    timer = threading.Timer(2.0, _finalize_album_and_send, args=[mgid])
    entry['timer'] = timer
    timer.start()

class StatsManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    
    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    lock = threading.Lock()

    @staticmethod
    def get_today_date() -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD"""
        return date.today().strftime('%Y-%m-%d')
    
    @staticmethod
    def increment_approved():
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        today = StatsManager.get_today_date()
        with StatsManager.lock:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π
            _ = stores['stats']['approved'][today]
            stores['stats']['approved'][today] += 1
            StatsManager.save_stats()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    
    @staticmethod
    def increment_rejected():
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        today = StatsManager.get_today_date()
        with StatsManager.lock:
            _ = stores['stats']['rejected'][today]
            stores['stats']['rejected'][today] += 1
            StatsManager.save_stats()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

    @staticmethod
    def increment_deleted():
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        today = StatsManager.get_today_date()
        with StatsManager.lock:
            _ = stores['stats']['deleted'][today]
            stores['stats']['deleted'][today] += 1
            StatsManager.save_stats()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    
    @staticmethod
    def get_stats_for_period(days: int) -> tuple:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"""
        today = date.today()
        approved_count = 0
        rejected_count = 0
        deleted_count = 0
        
        for i in range(days):
            check_date = (today - timedelta(days=i)).strftime('%Y-%m-%d')
            approved_count += stores['stats']['approved'].get(check_date, 0)
            rejected_count += stores['stats']['rejected'].get(check_date, 0)
            deleted_count += stores['stats']['deleted'].get(check_date, 0)
        
        return approved_count, rejected_count, deleted_count
    
    @staticmethod
    def get_all_time_stats() -> tuple:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è"""
        approved_count = sum(stores['stats']['approved'].values())
        rejected_count = sum(stores['stats']['rejected'].values())
        deleted_count = sum(stores['stats']['deleted'].values())
        return approved_count, rejected_count, deleted_count
    
    @staticmethod
    def _cleanup_stats_by_days(days: int) -> None:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–Ω–µ–π"""
        today = date.today()
        cutoff_date = today - timedelta(days=days)
        
        # –û—á–∏—Å—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        for category in ['approved', 'rejected', 'deleted']:
            stores['stats'][category] = {
                k: v for k, v in stores['stats'][category].items() 
                if datetime.strptime(k, '%Y-%m-%d').date() >= cutoff_date
            }
    
    @staticmethod
    def cleanup_old_stats():
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Å—Ç–∞—Ä—à–µ 1 –≥–æ–¥–∞)"""
        StatsManager._cleanup_stats_by_days(365)
    
    @staticmethod
    def cleanup_weekly_stats():
        """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)"""
        StatsManager._cleanup_stats_by_days(7)
    
    @staticmethod
    def cleanup_monthly_stats():
        """–û—á–∏—Å—Ç–∫–∞ –º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)"""
        StatsManager._cleanup_stats_by_days(30)
    
    @staticmethod
    def cleanup_daily_stats():
        """–û—á–∏—Å—Ç–∫–∞ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è)"""
        StatsManager._cleanup_stats_by_days(1)
    
    @staticmethod
    def save_stats():
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º defaultdict –≤ –æ–±—ã—á–Ω—ã–π dict –¥–ª—è JSON
            stats_to_save = {
                'approved': dict(stores['stats']['approved']),
                'rejected': dict(stores['stats']['rejected']),
                'deleted': dict(stores['stats']['deleted'])
            }
            # –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å: –ø–∏—à–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –∑–∞–º–µ–Ω—è–µ–º
            tmp_file = f"{STATS_FILE}.tmp"
            with open(tmp_file, 'w', encoding='utf-8') as f:
                json.dump(stats_to_save, f, ensure_ascii=False, indent=2)
            os.replace(tmp_file, STATS_FILE)
            logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    @staticmethod
    def load_stats():
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(STATS_FILE):
                with open(STATS_FILE, 'r', encoding='utf-8') as f:
                    loaded_stats = json.load(f)
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ defaultdict
                    stores['stats']['approved'] = defaultdict(int, loaded_stats.get('approved', {}))
                    stores['stats']['rejected'] = defaultdict(int, loaded_stats.get('rejected', {}))
                    stores['stats']['deleted'] = defaultdict(int, loaded_stats.get('deleted', {}))
                logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞")
            else:
                logger.info("–§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    @staticmethod
    def auto_save_stats():
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
        AUTO_SAVE_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç
        ERROR_RETRY_INTERVAL = 60  # 1 –º–∏–Ω—É—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        while True:
            try:
                time.sleep(AUTO_SAVE_INTERVAL)
                StatsManager.save_stats()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                time.sleep(ERROR_RETRY_INTERVAL)

def retry_operation(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    @wraps(func)
    def wrapper(*args, **kwargs):
        last_error = None
        for attempt in range(MAX_RETRIES):
            try:
                return func(*args, **kwargs)
            except Exception as e:
                last_error = e
                if attempt < MAX_RETRIES - 1:
                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_RETRIES} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                    time.sleep(RETRY_DELAY)
        logger.error(f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")
        raise last_error
    return wrapper

@retry_operation
def send_message_safe(chat_id: int, content_type: str, content: Union[str, telebot.types.Message], 
                     caption: Optional[str] = None, parse_mode: Optional[str] = None) -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤"""
    try:
        if content_type == 'text':
            bot.send_message(chat_id, content, parse_mode=parse_mode)
        else:
            send_func = getattr(bot, f'send_{content_type}')
            send_func(chat_id, content, caption=caption, parse_mode=parse_mode)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {content_type}: {e}")
        raise

def create_markup(message_id: int, content_type: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{content_type}:{message_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{message_id}"),
        InlineKeyboardButton("üì© –í —á–∞—Ç", callback_data=f"sendtochat_{content_type}:{message_id}")
    )
    return markup

def send_text_safe(chat_id: int, text: str, parse_mode: Optional[str] = None, reply_markup: Optional[InlineKeyboardMarkup] = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º 403 (bot was blocked) –∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫"""
    try:
        bot.send_message(chat_id, text, parse_mode=parse_mode, reply_markup=reply_markup)
    except Exception as e:
        err_text = str(e)
        if "bot was blocked by the user" in err_text or "Forbidden: bot was blocked" in err_text:
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

def send_media(chat_id: int, content_type: str, content, caption: str = "", to_chat: bool = False) -> None:
    """–ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏ –º–µ–¥–∏–∞ –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç"""
    if content_type == 'text':
        bot.send_message(chat_id, content, parse_mode="HTML")
        return
    if content_type == 'photo' and getattr(content[-1], 'file_id', None):
        bot.send_photo(chat_id, content[-1].file_id, caption=caption, parse_mode="HTML")
        return
    if hasattr(content, 'file_id'):
        send_func = getattr(bot, f'send_{content_type}', None)
        if send_func:
            kwargs = {}
            if content_type in ['video', 'animation']:
                kwargs = {'caption': caption, 'parse_mode': "HTML"}
            elif content_type == 'voice':
                kwargs = {'caption': caption} if caption else {}
            send_func(chat_id, content.file_id, **kwargs)

def send_delete_request_to_admins(user_id: int, link: str, description: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π ID –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    anonymous_id = hashlib.md5(f"{user_id}_{int(time.time())}".encode()).hexdigest()[:8]
    request_id = f"delete_{anonymous_id}_{int(time.time())}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
    request_text = f"*–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:*\n"
    request_text += f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {description if description else '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
    request_text += f"*–°—Å—ã–ª–∫–∞:* {link}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data=f"approve_delete:{request_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data=f"reject_delete:{request_id}")
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    stores['delete_requests'][request_id] = {
        'user_id': user_id,
        'link': link,
        'description': description,
        'admin_messages': []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π
    for admin_id in ADMIN_IDS:
        try:
            sent_message = bot.send_message(admin_id, request_text, reply_markup=markup, parse_mode="Markdown")
            stores['delete_requests'][request_id]['admin_messages'].append((admin_id, sent_message.message_id))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

def delete_message_from_channel(link: str) -> bool:
    """–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –ø–æ —Å—Å—ã–ª–∫–µ"""
    try:
        channel_username, message_id = LinkValidator.extract_channel_and_message_id(link)
        if not channel_username or not message_id:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Å—ã–ª–∫–∏")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        try:
            channel_info = bot.get_chat(CHANNEL_ID)
            channel_username_from_id = channel_info.username
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à –∫–∞–Ω–∞–ª (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º username –∏–ª–∏ ID)
            if channel_username != channel_username_from_id and channel_username != str(CHANNEL_ID):
                logger.warning("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á—É–∂–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
                return False
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–Ω–∞–ª: {e}")
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–∑—Ä–µ—à–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ (–Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            bot_member = bot.get_chat_member(CHANNEL_ID, bot.get_me().id)
            if not bot_member.can_delete_messages:
                logger.error("–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
                return False
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞: {e}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            bot.delete_message(CHANNEL_ID, message_id)
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞")
            return True
        except Exception as delete_error:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ ID –∏–∑ —Å—Å—ã–ª–∫–∏, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID: {delete_error}")
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∫–∞–Ω–∞–ª–∞
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
                messages = bot.get_chat_history(CHANNEL_ID, limit=100)
                
                for msg in messages:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ–≥–æ
                    if hasattr(msg, 'text') and msg.text and link in msg.text:
                        bot.delete_message(CHANNEL_ID, msg.message_id)
                        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É")
                        return True
                    elif hasattr(msg, 'caption') and msg.caption and link in msg.caption:
                        bot.delete_message(CHANNEL_ID, msg.message_id)
                        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É")
                        return True
                
                logger.error("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ")
                return False
                
            except Exception as search_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {search_error}")
                return False
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

def cleanup_bot_messages(user_id: int, chat_id: int) -> None:
    """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in stores['delete_requests']:
        user_data = stores['delete_requests'][user_id]
        bot_messages = user_data.get('bot_messages', [])
        
        for message_id in bot_messages:
            try:
                bot.delete_message(chat_id, message_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        user_data['bot_messages'] = []

def cleanup_user_data(user_id: int) -> None:
    """–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in stores['delete_requests']:
        del stores['delete_requests'][user_id]

def delete_admin_messages(request_id: str) -> None:
    """–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º —É –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if request_id in stores['delete_requests']:
        request_data = stores['delete_requests'][request_id]
        admin_messages = request_data.get('admin_messages', [])
        
        for admin_id, message_id in admin_messages:
            try:
                bot.delete_message(admin_id, message_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        request_data['admin_messages'] = []

def delete_message_by_forward(link: str) -> bool:
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ get_chat –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
            channel_username, message_id = LinkValidator.extract_channel_and_message_id(link)
            
            if not channel_username or not message_id:
                return False
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
            try:
                # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_link = f"https://t.me/{channel_username}/{message_id}"
                
                # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot.delete_message(CHANNEL_ID, message_id)
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞")
                return True
                
            except Exception as direct_error:
                logger.warning(f"–ü—Ä—è–º–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {direct_error}")
                
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
                    messages = bot.get_chat_history(CHANNEL_ID, limit=200)
                    
                    # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID –∏–ª–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                    for msg in messages:
                        if msg.message_id == message_id:
                            bot.delete_message(CHANNEL_ID, msg.message_id)
                            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ")
                            return True
                    
                    logger.error("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–Ω–∞–ª–∞")
                    return False
                    
                except Exception as history_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {history_error}")
                    return False
                    
        except Exception as link_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {link_error}")
            return False
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –º–µ—Ç–æ–¥–µ: {e}")
        return False

def send_to_admin(content, content_type: str, message_id: int, caption: str = "") -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    markup = create_markup(message_id, content_type)
    sent_messages_store = stores['sent']
    sent_messages_store[message_id] = []  # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–æ–≤

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    special_captions = {
        'voice': "–ê–Ω–æ–Ω–∏–º–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        'animation': "–ê–Ω–æ–Ω–∏–º–Ω–∞—è –≥–∏—Ñ–∫–∞:"
    }
    
    final_caption = special_captions.get(content_type, caption)

    for admin_id in ADMIN_IDS:
        try:
            sent_message = None
            if content_type == 'text':
                sent_message = bot.send_message(admin_id, content, reply_markup=markup)
            elif content_type in CONTENT_TYPES and content:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
                if content_type == 'photo' and content[-1].file_id:
                    sent_message = bot.send_photo(admin_id, content[-1].file_id, 
                                               caption=final_caption, reply_markup=markup)
                elif hasattr(content, 'file_id') and content.file_id:
                    send_func = getattr(bot, f'send_{content_type}')
                    if content_type in ['voice', 'animation']:
                        sent_message = send_func(admin_id, content.file_id, 
                                               caption=final_caption, reply_markup=markup)
                    else:
                        sent_message = send_func(admin_id, content.file_id, 
                                               caption=final_caption, reply_markup=markup)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if sent_message:
                sent_messages_store[message_id].append((admin_id, sent_message.message_id))

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

def handle_content(message: telebot.types.Message, content_type: str) -> None:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    # –ï—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞ ‚Äî —Å–æ–±–∏—Ä–∞–µ–º –ø–æ media_group_id –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É
    if getattr(message, 'media_group_id', None) and content_type in ['photo', 'video']:
        collect_album_part(message)
        return
    content = getattr(message, content_type, None)
    if content and not MessageHandler.check_spam(content, content_type, stores['spam'], str(message.from_user.id)):
        caption = getattr(message, 'caption', None)
        send_to_admin(content, content_type, message.message_id, caption or "")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
# –£–¥–∞–ª—ë–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start

@bot.message_handler(commands=['delete_msg'])
def start_delete_process(message):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = message.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stores['delete_requests'][user_id] = {
        'link': '',
        'description': '',
        'message_id': message.message_id,
        'bot_messages': [],  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
        'start_time': datetime.now()  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    sent_message = bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.")
    stores['delete_requests'][user_id]['bot_messages'].append(sent_message.message_id)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
    stores['delete_requests'][user_id]['state'] = DeleteStates.WAITING_LINK
    
    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–æ–º–∞–Ω–¥—É
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /delete_msg: {e}")

 

## –ö–æ–º–∞–Ω–¥–∞ /leave —É–¥–∞–ª–µ–Ω–∞

@bot.message_handler(commands=['check_rights'])
def check_bot_rights(message):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ"""
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –≤ –∫–∞–Ω–∞–ª–µ
        bot_member = bot.get_chat_member(CHANNEL_ID, bot.get_me().id)
        
        rights_info = f"üîê <b>–ü—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ:</b>\n\n"
        rights_info += f"‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {'‚úÖ' if bot_member.can_delete_messages else '‚ùå'}\n"
        rights_info += f"‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {'‚úÖ' if bot_member.can_edit_messages else '‚ùå'}\n"
        rights_info += f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {'‚úÖ' if bot_member.can_invite_users else '‚ùå'}\n"
        rights_info += f"‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {'‚úÖ' if bot_member.can_restrict_members else '‚ùå'}\n"
        rights_info += f"‚Ä¢ –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {'‚úÖ' if bot_member.can_pin_messages else '‚ùå'}\n"
        rights_info += f"‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {'‚úÖ' if bot_member.can_post_messages else '‚ùå'}\n"
        
        if not bot_member.can_delete_messages:
            rights_info += f"\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π! –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã /delete_msg."
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="check_rights_close"))
        bot.send_message(message.chat.id, rights_info, parse_mode="HTML", reply_markup=markup)
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–æ–º–∞–Ω–¥—É
        try:
            bot.delete_message(message.chat.id, message.message_id)
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /check_rights: {e}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –±–æ—Ç–∞: {e}")
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤: {e}")


@bot.message_handler(commands=['restart'])
def restart_bot(message):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ bot2.py (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        bot.reply_to(message, "üîÑ <b>–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...</b>\n\n–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞...", parse_mode="HTML")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
        StatsManager.save_stats()
        logger.info("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º")
        
        # –ü—É—Ç—å –∫ bot2.py
        bot2_path = os.path.join(os.path.dirname(__file__), "bot2.py")
        
        if not os.path.exists(bot2_path):
            bot.reply_to(message, "‚ùå <b>–û—à–∏–±–∫–∞:</b> –§–∞–π–ª bot2.py –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="HTML")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º bot2.py
        try:
            if os.name == 'nt':  # Windows
                subprocess.Popen([sys.executable, bot2_path], 
                               creationflags=subprocess.CREATE_NEW_CONSOLE)
            else:  # Linux/Mac
                subprocess.Popen([sys.executable, bot2_path], 
                               stdout=subprocess.DEVNULL, 
                               stderr=subprocess.DEVNULL)
            
            logger.info("–ó–∞–ø—É—â–µ–Ω bot2.py –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
            bot.reply_to(message, "‚úÖ <b>–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞</b>\n\n–û–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ...", parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ bot2.py: {e}")
            bot.reply_to(message, f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:</b> {e}", parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
        bot.reply_to(message, f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ:</b> {e}", parse_mode="HTML")

@bot.message_handler(commands=['stop'])
def stop_bot(message):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        bot.reply_to(message, "üõë <b>–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...</b>\n\n–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...", parse_mode="HTML")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
        StatsManager.save_stats()
        logger.info("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        bot.reply_to(message, "‚úÖ <b>–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</b>\n\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", parse_mode="HTML")
        
        # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        time.sleep(2)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
        logger.info("–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        os._exit(0)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

@bot.message_handler(commands=['status'])
def bot_status(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ (–¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º)"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = bot.get_me()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        active_requests = len(stores['delete_requests'])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        approved, rejected, deleted = StatsManager.get_all_time_stats()
        total = approved + rejected
        
        status_text = f"ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\n"
        status_text += f"‚Ä¢ <b>–ò–º—è:</b> {bot_info.first_name}\n"
        status_text += f"‚Ä¢ <b>Username:</b> @{bot_info.username}\n"
        status_text += f"‚Ä¢ <b>ID:</b> {bot_info.id}\n\n"
        status_text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        status_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {active_requests}\n"
        status_text += f"‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {approved}\n"
        status_text += f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected}\n"
        status_text += f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ: {deleted}\n"
        status_text += f"‚Ä¢ –í—Å–µ–≥–æ: {total}\n\n"
        # –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –∏ –∞–ø—Ç–∞–π–º
        started_at = START_TIME
        uptime_delta = datetime.now() - started_at
        days = uptime_delta.days
        hours, remainder = divmod(uptime_delta.seconds, 3600)
        minutes, _ = divmod(remainder, 60)
        status_text += f"üïí <b>–†–∞–±–æ—Ç–∞–µ—Ç —Å:</b> {started_at.strftime('%d.%m.%Y %H:%M:%S')}\n"
        status_text += f"‚è≥ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {days} –¥. {hours} —á. {minutes} –º–∏–Ω."
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="status_close"))
        
        bot.send_message(message.chat.id, status_text, parse_mode="HTML", reply_markup=markup)
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–æ–º–∞–Ω–¥—É
        try:
            bot.delete_message(message.chat.id, message.message_id)
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /status: {e}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞: {e}")
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

@bot.message_handler(commands=['help_admin'])
def admin_help(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    help_text = f"üîß <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
    help_text += f"<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
    help_text += f"‚Ä¢ /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
    help_text += f"‚Ä¢ /help_admin - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n\n"
    help_text += f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>\n"
    help_text += f"‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
    help_text += f"‚Ä¢ /status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
    help_text += f"‚Ä¢ /check_rights - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞\n\n"
    help_text += f"<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º:</b>\n"
    help_text += f"‚Ä¢ /restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
    help_text += f"‚Ä¢ /stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n\n"
    help_text += f"<b>–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
    help_text += f"‚Ä¢ /delete_msg - –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
    
    help_markup = InlineKeyboardMarkup()
    help_markup.add(InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_menu_close"))
    sent = bot.send_message(message.chat.id, help_text, parse_mode="HTML", reply_markup=help_markup)
    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–æ–º–∞–Ω–¥—É
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /help_admin: {e}")

@bot.message_handler(commands=['start'])
def start(message):
    try:
        bot.send_message(message.chat.id, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help_admin –∏–ª–∏ /stats.", parse_mode="HTML")
        try:
            bot.delete_message(message.chat.id, message.message_id)
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start: {e}")

@bot.message_handler(commands=['stats'])
def show_stats_menu(message):
    """–ò–Ω–ª–∞–π–Ω-–º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º)"""
    try:
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("üìä –ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="stats_today"),
            InlineKeyboardButton("üìà –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="stats_week")
        )
        markup.add(
            InlineKeyboardButton("üìÖ –ó–∞ –º–µ—Å—è—Ü", callback_data="stats_month"),
            InlineKeyboardButton("üïê –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è", callback_data="stats_all")
        )
        markup.add(
            InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="stats_close")
        )

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=markup)
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–æ–º–∞–Ω–¥—É
        try:
            bot.delete_message(message.chat.id, message.message_id)
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /stats: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    if user_id in stores['delete_requests']:
        user_data = stores['delete_requests'][user_id]
        current_state = user_data.get('state')
        
        if current_state == DeleteStates.WAITING_LINK:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É
            if LinkValidator.is_valid_telegram_link(message.text):
                user_data['link'] = message.text
                user_data['state'] = DeleteStates.WAITING_DESCRIPTION
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
                cleanup_bot_messages(user_id, message.chat.id)
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
                markup = InlineKeyboardMarkup()
                markup.add(
                    InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="add_description"),
                    InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–∞–ø", callback_data="skip_description")
                )
                
                sent_message = bot.reply_to(message, "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=markup)
                user_data['bot_messages'].append(sent_message.message_id)
            else:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
                cleanup_bot_messages(user_id, message.chat.id)
                
                sent_message = bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                user_data['bot_messages'].append(sent_message.message_id)
        
        elif current_state == DeleteStates.WAITING_DESCRIPTION:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            user_data['description'] = message.text
            user_data['state'] = None  # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
            cleanup_bot_messages(user_id, message.chat.id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            send_delete_request_to_admins(user_id, user_data['link'], user_data['description'])
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            sent_message = bot.reply_to(message, "–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            user_data['bot_messages'].append(sent_message.message_id)
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            threading.Timer(5.0, cleanup_user_data, args=[user_id]).start()
        
        return
    
    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —É–¥–∞–ª–µ–Ω–∏—è)
    if not MessageHandler.check_spam(message.text, 'text', stores['spam'], str(message.from_user.id)):
        send_to_admin(message.text, 'text', message.message_id)

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
for content_type in CONTENT_TYPES:
    bot.message_handler(content_types=[content_type])(
        lambda message, ct=content_type: handle_content(message, ct)
    )

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    try:
        # –ê–ª—å–±–æ–º—ã: approve/reject/sendtochat
        if call.data.startswith("approve_album:") or call.data.startswith("reject_album:") or call.data.startswith("sendtochat_album:"):
            if call.from_user.id not in ADMIN_IDS:
                bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
                return
            action, album_id = call.data.split(":", 1)
            album = stores['albums_data'].get(album_id)
            sent_info = stores['sent_albums'].get(album_id)
            if not album or not sent_info:
                bot.answer_callback_query(call.id, "–ê–ª—å–±–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
                return
            caption = album.get('caption') or ""
            if action == "approve_album":
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                media: List[Union[InputMediaPhoto, InputMediaVideo]] = []
                first = True
                for fid in album.get('photos', []):
                    if first:
                        media.append(InputMediaPhoto(media=fid, caption=caption, parse_mode="HTML"))
                        first = False
                    else:
                        media.append(InputMediaPhoto(media=fid))
                for fid in album.get('videos', []):
                    if first:
                        media.append(InputMediaVideo(media=fid, caption=caption, parse_mode="HTML"))
                        first = False
                    else:
                        media.append(InputMediaVideo(media=fid))
                try:
                    bot.send_media_group(CHANNEL_ID, media)
                    StatsManager.increment_approved()
                    bot.answer_callback_query(call.id, "–ê–ª—å–±–æ–º –æ–¥–æ–±—Ä–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–ª—å–±–æ–º–∞ –≤ –∫–∞–Ω–∞–ª: {e}")
                    bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–ª—å–±–æ–º–∞.")
            elif action == "sendtochat_album":
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –∫–∞–∫ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                media: List[Union[InputMediaPhoto, InputMediaVideo]] = []
                first = True
                for fid in album.get('photos', []):
                    if first:
                        media.append(InputMediaPhoto(media=fid, caption=caption, parse_mode="HTML"))
                        first = False
                    else:
                        media.append(InputMediaPhoto(media=fid))
                for fid in album.get('videos', []):
                    if first:
                        media.append(InputMediaVideo(media=fid, caption=caption, parse_mode="HTML"))
                        first = False
                    else:
                        media.append(InputMediaVideo(media=fid))
                try:
                    bot.send_media_group(CHAT_ID, media)
                    StatsManager.increment_approved()
                    bot.answer_callback_query(call.id, "–ê–ª—å–±–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç.")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª—å–±–æ–º–∞ –≤ —á–∞—Ç: {e}")
                    bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª—å–±–æ–º–∞.")
            else:  # reject_album
                StatsManager.increment_rejected()
                bot.answer_callback_query(call.id, "–ê–ª—å–±–æ–º –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            try:
                for admin_id, ids in sent_info.get('media_messages', []):
                    for mid in ids:
                        try:
                            bot.delete_message(admin_id, mid)
                        except Exception:
                            pass
                for admin_id, ctrl_id in sent_info.get('control_messages', []):
                    try:
                        bot.delete_message(admin_id, ctrl_id)
                    except Exception:
                        pass
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞ —É –∞–¥–º–∏–Ω–æ–≤: {e}")
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä
            if album_id in stores['sent_albums']:
                del stores['sent_albums'][album_id]
            if album_id in stores['albums_data']:
                del stores['albums_data'][album_id]
            return
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–ø—Ä–æ–ø—É—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
        if call.data in ["add_description", "skip_description"]:
            user_id = call.from_user.id
            if user_id in stores['delete_requests']:
                user_data = stores['delete_requests'][user_id]
                
                if call.data == "add_description":
                    user_data['state'] = DeleteStates.WAITING_DESCRIPTION
                    bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ:"
                    )
                else:  # skip_description
                    user_data['description'] = "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                    user_data['state'] = None
                    
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
                    cleanup_bot_messages(user_id, call.message.chat.id)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                    send_delete_request_to_admins(user_id, user_data['link'], user_data['description'])
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text="–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."
                    )
                    
                    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                    threading.Timer(5.0, cleanup_user_data, args=[user_id]).start()
            
            bot.answer_callback_query(call.id)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        if call.data.startswith("approve_delete:") or call.data.startswith("reject_delete:"):
            if call.from_user.id not in ADMIN_IDS:
                bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
                return
            
            action, request_id = call.data.split(":", 1)
            
            if request_id not in stores['delete_requests']:
                bot.answer_callback_query(call.id, "–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
                return
            
            request_data = stores['delete_requests'][request_id]
            user_id = request_data['user_id']
            link = request_data['link']
            
            if action == "approve_delete":
                # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                success = False
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
                if delete_message_from_channel(link):
                    success = True
                else:
                    # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π
                    logger.info("–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è")
                    if delete_message_by_forward(link):
                        success = True
                
                if success:
                    # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á—ë—Ç—á–∏–∫ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
                    StatsManager.increment_deleted()
                    send_text_safe(user_id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
                    bot.answer_callback_query(call.id, "–ó–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
                else:
                    send_text_safe(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ —É –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                    bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            else:  # reject_delete
                send_text_safe(user_id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
                bot.answer_callback_query(call.id, "–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
                StatsManager.save_stats()
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            delete_admin_messages(request_id)
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            del stores['delete_requests'][request_id]
            
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç–∞—Ç—É—Å–∞
        if call.data == "status_close":
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.answer_callback_query(call.id, "–°—Ç–∞—Ç—É—Å –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏")
            return

        # –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ check_rights
        if call.data == "check_rights_close":
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.answer_callback_query(call.id, "–û–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞ –ø—Ä–∞–≤: {e}")
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏")
            return
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é
        if call.data == "admin_menu_close":
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.answer_callback_query(call.id, "–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∞–¥–º–∏–Ω-–º–µ–Ω—é: {e}")
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏")
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω–æ)
        if call.data.startswith("stats_"):
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä—ã—Ç—å"
            if call.data == "stats_close":
                try:
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                    bot.delete_message(call.message.chat.id, call.message.message_id)
                    bot.answer_callback_query(call.id, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                    bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏")
                return
            
            period = call.data.split("_")[1]
            days, period_text = STATS_PERIODS[period]
            
            if days is None:  # "all" period
                approved, rejected, deleted = StatsManager.get_all_time_stats()
            else:
                approved, rejected, deleted = StatsManager.get_stats_for_period(days)
            
            total = approved + rejected
            approved_percent = (approved / total * 100) if total > 0 else 0
            rejected_percent = (rejected / total * 100) if total > 0 else 0
            
            stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ {period_text}</b>\n\n"
            stats_text += f"‚úÖ <b>–û–¥–æ–±—Ä–µ–Ω–æ:</b> {approved} ({approved_percent:.1f}%)\n"
            stats_text += f"‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–æ:</b> {rejected} ({rejected_percent:.1f}%)\n"
            stats_text += f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–æ:</b> {deleted}\n"
            stats_text += f"üìà <b>–í—Å–µ–≥–æ:</b> {total}"
            
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–∫—Ä—ã—Ç—å"
            markup = InlineKeyboardMarkup()
            markup.add(
                InlineKeyboardButton("üìä –ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="stats_today"),
                InlineKeyboardButton("üìà –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="stats_week")
            )
            markup.add(
                InlineKeyboardButton("üìÖ –ó–∞ –º–µ—Å—è—Ü", callback_data="stats_month"),
                InlineKeyboardButton("üïê –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è", callback_data="stats_all")
            )
            markup.add(
                InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="stats_close")
            )
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=stats_text,
                reply_markup=markup,
                parse_mode="HTML"
            )
            bot.answer_callback_query(call.id, f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {period_text} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        data = call.data.split(":")
        action, message_id = data[0], int(data[1])

        if action.startswith("approve"):
            content_type = action.split('_')[1]
            content = call.message
            caption = content.caption if content.caption else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            channel_captions = {
                'text': f"<b>–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º:</b>\n\n{content.text}",
                'photo': f"<b>–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Ñ–æ—Ç–æ:</b>\n\n{caption}",
                'video': f"<b>–ê–Ω–æ–Ω–∏–º–Ω–æ–µ –≤–∏–¥–µ–æ:</b>\n\n{caption}",
                'voice': "–ê–Ω–æ–Ω–∏–º–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
                'animation': "–ê–Ω–æ–Ω–∏–º–Ω–∞—è –≥–∏—Ñ–∫–∞:"
            }
            
            if content_type == 'text':
                bot.send_message(CHANNEL_ID, channel_captions['text'], parse_mode="HTML")
            elif content_type == 'photo':
                bot.send_photo(CHANNEL_ID, content.photo[-1].file_id, 
                             caption=channel_captions['photo'], parse_mode="HTML")
            elif content_type in CONTENT_TYPES and hasattr(content, content_type):
                content_obj = getattr(content, content_type)
                if hasattr(content_obj, 'file_id') and content_obj.file_id:
                    send_func = getattr(bot, f'send_{content_type}')
                    send_func(CHANNEL_ID, content_obj.file_id, 
                             caption=channel_captions.get(content_type, ""))

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö
            StatsManager.increment_approved()
            bot.answer_callback_query(call.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª.")

        elif action.startswith("sendtochat"):
            content_type = action.split('_')[1]
            content = call.message
            caption = content.caption if content.caption else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            chat_captions = {
                'text': f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç:</b>\n\n{content.text}",
                'photo': f"<b>–§–æ—Ç–æ:</b>\n\n{caption}",
                'video': f"<b>–í–∏–¥–µ–æ:</b>\n\n{caption}",
                'voice': "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
                'animation': "–ì–∏—Ñ–∫–∞:"
            }
            
            if content_type == 'text':
                bot.send_message(CHAT_ID, chat_captions['text'], parse_mode="HTML")
            elif content_type == 'photo':
                bot.send_photo(CHAT_ID, content.photo[-1].file_id, 
                             caption=chat_captions['photo'], parse_mode="HTML")
            elif content_type in CONTENT_TYPES and hasattr(content, content_type):
                content_obj = getattr(content, content_type)
                if hasattr(content_obj, 'file_id') and content_obj.file_id:
                    send_func = getattr(bot, f'send_{content_type}')
                    send_func(CHAT_ID, content_obj.file_id, 
                             caption=chat_captions.get(content_type, ""))

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö (–æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç —Ç–æ–∂–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ–¥–æ–±—Ä–µ–Ω–∏–µ–º)
            StatsManager.increment_approved()
            bot.answer_callback_query(call.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç.")

        elif action == "reject":
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã—Ö
            StatsManager.increment_rejected()
            bot.answer_callback_query(call.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —É –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if message_id in stores['sent']:
            for admin_id, sent_message_id in stores['sent'][message_id]:
                try:
                    bot.delete_message(admin_id, sent_message_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            del stores['sent'][message_id]

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

def check_internet_connection() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        response = requests.get("https://api.telegram.org", timeout=3)
        return response.status_code == 200
    except (requests.RequestException, ConnectionError, TimeoutError):
        return False

def daily_cleanup_scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤ 00:00"""
    while True:
        try:
            now = datetime.now()
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ª—É–Ω–æ—á–∏
            next_midnight = now.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1)
            sleep_seconds = (next_midnight - now).total_seconds()
            
            logger.info(f"–°–ª–µ–¥—É—é—â–∞—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤: {next_midnight}")
            time.sleep(sleep_seconds)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è)
            StatsManager.cleanup_daily_stats()
            StatsManager.save_stats()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            logger.info("–î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")
            time.sleep(3600)  # –ñ–¥—ë–º —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ

def weekly_cleanup_scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 00:00"""
    while True:
        try:
            now = datetime.now()
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –≤ 00:00
            days_ahead = 0 - now.weekday()  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0
            if days_ahead <= 0:  # –ï—Å–ª–∏ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —É–∂–µ –ø—Ä–æ—à—ë–ª –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
                days_ahead += 7
            next_monday = now.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=days_ahead)
            sleep_seconds = (next_monday - now).total_seconds()
            
            logger.info(f"–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤: {next_monday}")
            time.sleep(sleep_seconds)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            StatsManager.cleanup_weekly_stats()
            StatsManager.save_stats()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            logger.info("–ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –Ω–µ–¥–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")
            time.sleep(3600)  # –ñ–¥—ë–º —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ

def monthly_cleanup_scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫–∞–∂–¥–æ–µ 1-–µ —á–∏—Å–ª–æ –≤ 00:00"""
    while True:
        try:
            now = datetime.now()
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ 1-–≥–æ —á–∏—Å–ª–∞ –≤ 00:00
            if now.day == 1:
                # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è 1-–µ —á–∏—Å–ª–æ, —Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –±—É–¥–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ
                next_month = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0) + timedelta(days=32)
                next_first = next_month.replace(day=1)
            else:
                # –°–ª–µ–¥—É—é—â–∏–π 1-–π –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
                next_first = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0) + timedelta(days=32)
                next_first = next_first.replace(day=1)
            
            sleep_seconds = (next_first - now).total_seconds()
            
            logger.info(f"–°–ª–µ–¥—É—é—â–∞—è –º–µ—Å—è—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤: {next_first}")
            time.sleep(sleep_seconds)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            StatsManager.cleanup_monthly_stats()
            StatsManager.save_stats()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            logger.info("–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –º–µ—Å—è—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")
            time.sleep(3600)  # –ñ–¥—ë–º —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ

def cleanup_old_delete_requests():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)"""
    current_time = datetime.now()
    expired_users = []
    
    for user_id, user_data in stores['delete_requests'].items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ FSM –±–æ–ª–µ–µ —á–∞—Å–∞
        if user_data.get('state') is None:
            # –ï—Å–ª–∏ FSM –∑–∞–≤–µ—Ä—à–µ–Ω, —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 1 —á–∞—Å
            if 'completion_time' not in user_data:
                user_data['completion_time'] = current_time
            elif isinstance(user_data.get('completion_time'), datetime) and current_time - user_data['completion_time'] > timedelta(hours=1):
                expired_users.append(user_id)
        else:
            # –ï—Å–ª–∏ FSM –∞–∫—Ç–∏–≤–µ–Ω, —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞
            if 'start_time' not in user_data:
                user_data['start_time'] = current_time
            elif isinstance(user_data.get('start_time'), datetime) and current_time - user_data['start_time'] > timedelta(hours=2):
                expired_users.append(user_id)
    
    # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    for user_id in expired_users:
        del stores['delete_requests'][user_id]
        logger.info("–£–¥–∞–ª–µ–Ω –∏—Å—Ç–µ–∫—à–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ")

def delete_requests_cleanup_scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç"""
    while True:
        try:
            time.sleep(1800)  # 30 –º–∏–Ω—É—Ç
            cleanup_old_delete_requests()
            logger.info("–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
            time.sleep(1800)

@retry_operation
def run_bot():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    StatsManager.load_stats()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (–º–µ–Ω—é)
    try:
        # –ö–æ–º–∞–Ω–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        default_commands = [
            BotCommand("delete_msg", "–ó–∞–ø—Ä–æ—Å–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"),
            BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"),
            BotCommand("status", "–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞")
        ]
        bot.set_my_commands(default_commands, scope=BotCommandScopeDefault())

        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (–Ω–∞ —É—Ä–æ–≤–Ω–µ –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∞)
        admin_commands = [
            BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
            BotCommand("help_admin", "–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
            BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"),
            BotCommand("status", "–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"),
            BotCommand("check_rights", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞"),
            BotCommand("restart", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("stop", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("leave", "–ó–∞–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"),
            BotCommand("delete_msg", "–ó–∞–ø—Ä–æ—Å–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        ]
        for admin_id in ADMIN_IDS:
            bot.set_my_commands(admin_commands, scope=BotCommandScopeChat(chat_id=admin_id))
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
    daily_cleanup_thread = threading.Thread(target=daily_cleanup_scheduler, daemon=True)
    weekly_cleanup_thread = threading.Thread(target=weekly_cleanup_scheduler, daemon=True)
    monthly_cleanup_thread = threading.Thread(target=monthly_cleanup_scheduler, daemon=True)
    delete_requests_cleanup_thread = threading.Thread(target=delete_requests_cleanup_scheduler, daemon=True)
    
    daily_cleanup_thread.start()
    weekly_cleanup_thread.start()
    monthly_cleanup_thread.start()
    delete_requests_cleanup_thread.start()
    
    logger.info("–í—Å–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω—ã")
    bot.polling(none_stop=True)

if __name__ == "__main__":
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        run_bot()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        StatsManager.save_stats()
        logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –±–æ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        StatsManager.save_stats()
        logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º")

